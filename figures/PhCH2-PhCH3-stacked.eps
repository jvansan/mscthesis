%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A405) Quartz PS Context)
%%Title: PhCH2-PhCH3-stacked.eps
%%Creator: ChemDraw Professional(tm) 16.0.0.82
%%CreationDate: 2017-10-11 17:40:16 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 428 156
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2016 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 428 156
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: JTFAVW+ArialMT
%!FontType1-1.0: JTFAVW+ArialMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /JTFAVW+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /H put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<



592D2C4B5258B00425B0042549B00425B00425496120B0005458212043B0005558B00325B00325B8FFC038B8FFC038591BB04054582043B0005458B00225B8FFC038591B2043B0005458B00325B00325B8FFC038B8FFC0381BB00325B8FFC03859595959212121212D2C462346608A8A462320468A608A61B8FF8062232010238AB902C202C28A70456020B0005058B00161B8FFBA8B1BB0468C59B0106068013A2D2CB1020042B123018851B1400188535A58B910000020885458B202010243604259592D2CB0024354584B53234B515A58381B2121591B21212121592D000000020100000005000500000300070000211121112521112101000400FC2003C0FC400500FB002004C00000010066FFE7057605D3001D00D3B563026A1D0201B8FFE8B40B0B065500B8FFE8405F0B0B06552000320D63007000741D8000841D90009A05AB03A50DB903B40DC70DD000E41DF31D110E121D111D1D032A0628112A1C201F470D56145715561968056B1D7B128B129A03990E9A1CA801A402A811D50E130014001A1014101A0402B8FFDEB2283901B8FFC0402D2839100F0001041B131E0C031B1E040910260F4A0026200101011A1F1726200801080C0B0B065508191E635C182B4E10F42B5D4DED4E10F65D4DEDF4ED003FED3FED1117393130012B2B5D5D71005D2B2B017201170604232224023534122433320417072626232206021514121633323604B4C23DFEC3E5EDFED79BAF0143C2DC012C3BBF33C293A9E35C6DE686A3E2020231EFFBC1016ED2E50155B1E0CB2DA092A2FEEF91BBFEE98ABC00000100A40000052205BA000B00D8B9000DFFC0401A13153404031E090AA00AD00A020A0502020B0808050820070706B8FFEEB40F0F025506B8FFF2400B0D0D025506100C0C025506B8FFE040180B0B065506010C0C0655065D800D010D020B200120000100B8FFC0400A13153400201010025500B8FFF6B40F0F025500B8FFF6B40D0D025500B8FFFA400B0C0C025500080B0B065500B8FFF7B40C0C065500B8FFF840160D0D0655005D0C200D01200D500D600D700D043B59182B5D7110F62B2B2B2B2B2B2B2B5D3CFD3C105DF62B2B2B2B2B3C10FD3C003F3C3F3C395D2F3CFD3C3130012B331133112111331123112111A4C202FAC2C2FD0605BAFDA6025AFA4602B3FD4D000200880000013C05BA0003000700CD405E09360B0B02554F099009A009B009C009DF09F0090700091F09700980099F09B009C009DF09E009FF090A1F09010001070402030906037E0100060506040A0607250500049F04A004B004C004E00406C004F0040200042004D004E0040404B8FFF8B41010025504B8FFFA40170E0E025504040C0C0255040A0B0B025504140B0B065504B8FFEAB41010065504B8FFFEB40D0D065504B8FFFC400A0C0C0655044E08475018

0326031CB23B1F40BB0322003E00330322B225311FB80318B23C691FB802E3B3202B1FA0413002D400B002D40002000002D4001002D4002002D4005002D4006002D4007002D40006006002D6007002D6008002D6009002D600A002D600B002D60006000002D6001002D6002002CA002002CC002002D6003002D6004002D6005002D6000802D0B2202B1FB802CFB226421F411602CE02C70017001F02CD02C80017001F02CC02C60017001F02CB02C50017001F02C902C5001E001F02CA02C6B21E1F00410B02C6000002C7001002C6001002C7002F02C5000502C1B324121FFF411102BF0001001F02BF002F02BF003F02BF004F02BF005F02BF008F02BF000602BF0222B2641F12410B02BB00CA0800001F02B200E90800001F02A600A20800406A1F4026434932402043493240263A3D3240203A3D329F209F26024026969932402096993240268E923240208E92324026848C324020848C3240267A813240207A813240266C763240206C76324026646A324020646A3240265A5F3240205A5F3240264F543240204F5432B8029EB724271F374F6B0120410F0277003002770040027700500277000402770277027700F90400001F029BB22A2A1FB8029A402B292A1F80BA0180BC0180520180A201806501807E01808101803C01805E01802B01801C01801E0180400180BB0138000100800140B40180400180BB013800010080013940180180CA0180AD018073018026018025018024018020013740B80221B2493340B80221B2453340B80221B341423240B80221B33D3E320F410F0221003F0221007F0221000300BF022100CF022100FF0221000300400221B320223240B80221B3191E3240B80222B32A3F3240B80221B32E3A326F414802C3007F02C3008F02C300DF02C30004002F02C3006002C300CF02C30003000F02C3003F02C3005F02C300C002C300EF02C300FF02C3000600DF02220001008F02220001000F0222002F0222003F0222005F0222007F022200EF0222000600BF022100EF02210002006F0221007F022100AF02210003002F0221003F0221004F0221000302C302C30222022202210221401D101C102B1048038F1C010F1E014F1EFF1E023700161600000012110811B8010DB6F70DF8F70D00094109028E028F001D001F0290028F001D001F028FB2F91D1FB80198B226BB1F41150197001E0401001F013900260125001F013800730401001F0135001C0801001F0134001C02AB001F0132B21C561FB8010FB2262C1FBA010E001E0401B61FF91CE41FE91CB80201B61FE81CBB1FD720B80401B21FD51CB802ABB61FD41C891FC92FB80801B21FBC26B80101B21FBA20B80201B61FB91C381FADCAB80401B21F8126B8019AB21F7E26B8019AB61F7D1C471F6B1CB80401B21F6526B8019AB21F5E73B80401400F1F52265A

002B7475737500184569444569444569447373737374757374752B2B2B2B74752B2B2B2B2B737373737373737373737373737373737373737373737373732B2B2B45B0406144737400004BB02A534BB03F515A58B1070745B040604459004BB03A534BB03F515A58B10B0B45B8FFC0604459004BB02E534BB03A515A58B1030345B040604459004BB02E534BB03C515A58B1090945B8FFC06044592B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B752B2B2B2B2B2B2B435C58B9008002BBB301401E017400735903B01E4B5402B0124B545AB012435C5A58BA009F02220001007359002B7473012B01732B2B2B2B2B2B2B2B737373732B2B2B2B2B002B2B2B2B2B2B004569447345694473456944737475456944734569444569444569447374456944456944732B2B2B2B2B732B002B732B74752B2B2B2B2B2B2B2B2B2B2B2B2B2B737475732B7374757374752B2B2B742B2B0000
00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/C 1 def
/H 2 def
/i 3 def
/acute 4 def
/glyph3380 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1361 -665 4096 2060}def
/UniqueID 4167158 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693491A2FA54E38FF421606F41F15594F07F865F909FE7990EC028684F89B0A24E822BAF31E7CC3C8F9602CCD6FB5E14C040606D60F5BAC95E033E33D144803E18FDE5B941C8EF32884D521EEF728E0B6E73DC2B176A161477B94FB44D4AC4E432E4AC6520108D0A1DC1D757895CECEBA20BDFD1A5A73D77B3B37110CF85FC1D1AFD4AF6BEA1748732515DB891A726DEF77926822302E6871FC815A2A515F72F01F246D917FE9E606B5780031A8D4D1360DA433056909F3D8F3C7C57959A48B42148AB651B8206176EB6D4EE1FFBE02DEC5EAB89A5F1FF2971043C8F6775583AF34CD9FDBA7AD1956F128B2A92100CC29633A2DDDF9F27E2389DDD69D373FC7570EC4E53EAE068B11D6B2FF766F7805E8127B5585994E98BBCEF07984E9BC5EF0D8090038D2A343D3D47A83EAC7FA11A2AD0E6763A6763210A89AA094EE623C9170885B8E41365B248C78FEA6CE5D32E36CD9C3EBADB89782DB435A23832D205259E90F5C2663098EF737F2D49D3243A3307759F7747B794331C12034569922415D1D7574628D3D2F7854754CF547182D99E217E61F6FE4420E118012C8485404DFFF32F8A295D9F12E6B3B512D25C994B6BBFDE84C3EA7347BF07D6002FDF005CD1779C5BBD191EB7CA56D84DAC0CF0DAEB1ADD32E8E1770E578108A57EDF563005A16FFB84CBCE71251DDE182CAAB9399E52F5E90C23D7D3476FB1A5B4D99FB649BFED8EAEB9A4886F9667E012C50FFCE28588A24C8CA4B4CCDA1074781A1D300E65C109BBC515DBC0736FECBE3BD8EFC442FC26D
E250E7CE1A494DA18D8A9FA8FE74DDDA1F17868720101AC98A66504362829CE7E610AED762DB198AD52AC2D88B9AAAE4F6647C0BD8C5DD38A6EEC156354B0963BA670AA23D49AE3BB56D85C1822A98A41CCF94B0B32E998FDAED666E3315957EEB36E2C01325949CF5098D42AE0FDE1519D85A1C57383939E3B0E03006CCCE6EF62937
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/JTFAVW+ArialMT cguidfix
/F1.1/JTFAVW+ArialMT renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 sc
q
0 156 m
428 156 l
428 0 l
0 0 l
h
0 156 m
W
0 0 428 156 rc
-1 156 m
429 156 l
429 -1 l
-1 -1 l
h
f
0 sc
84.355064 105.0751 m
88.749023 100.90582 l
39.212227 102.782 l
43.908962 106.60698 l
84.355064 105.0751 l
h
f
20 w
0.050000001 0 0 -0.050000001 -67 209 cm
3507.9048 1772.1243 m
3102.0317 2090.2283 l
S
CM
109.10194 121.95581 m
109.89523 121.89378 l
110.08598 121.3862 l
88.749023 100.90582 l
84.355064 105.0751 l
109.10194 121.95581 l
h
f
1 J
0.050000001 0 0 -0.050000001 -67 209 cm
3537.9048 1742.1243 m
3101.9666 1329.8651 l
S
3101.9666 1329.8651 m
2200.1553 1295.7095 l
S
2200.1553 1295.7095 m
1734.2825 1673.8132 l
S
0 J
2140.2209 2056.0728 m
1764.2825 1703.8132 l
S
CM
43.908962 106.60698 m
39.212227 102.782 l
18.992899 125.36794 l
20.509834 125.31119 l
43.908962 106.60698 l
h
f
0.050000001 0 0 -0.050000001 -67 209 cm
1999.3921 1683.854 m
1992.6569 1861.6827 2272.4514 2016.8292 2623.8918 2030.1398 c
2975.3318 2043.4503 3266.0601 1909.9121 3272.7952 1732.0835 c
3279.5303 1554.2548 2999.7358 1399.1086 2648.2959 1385.7981 c
2296.8555 1372.4875 2006.1273 1506.0254 1999.3921 1683.854 c
h
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 136.26291 124.8985 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.2802734 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
3537.9048 1742.1243 m
4035.3369 1760.9644 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 163.88539 102.56285 cm
0 7.1582031 m
(")s
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
4569.5894 2107.3435 m
4257.0059 1866.3356 l
S
CM
164.86475 104.46642 m
161.09416 99.799232 l
144.03607 116.79429 l
144.66449 117.57215 l
164.86475 104.46642 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 170.0201 138.56969 cm
0 7.1582031 m
(")s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
4671.9429 1483.7819 m
4716.4722 1593.0795 l
S
4618.0454 1512.2218 m
4658.0449 1610.4016 l
S
4564.1484 1540.6619 m
4599.6182 1627.7239 l
S
4510.251 1569.1019 m
4541.1914 1645.046 l
S
4456.3535 1597.542 m
4482.7646 1662.3683 l
S
4402.4565 1625.9819 m
4424.3379 1679.6906 l
S
4348.5591 1654.422 m
4365.9111 1697.0127 l
S
4294.6621 1682.8621 m
4307.4844 1714.335 l
S
4240.7646 1711.3021 m
4249.0576 1731.6572 l
S
1 sc
CM
140.5659 127.4182 m
136.79985 127.56084 134.0118 139.97646 134.15556 143.77263 c
134.3313 148.4124 135.45309 151.74915 141.47878 151.52092 c
147.50446 151.29269 148.37065 147.88068 148.19492 143.24091 c
148.05115 139.44472 144.33195 127.27556 140.5659 127.4182 c
h
f
0 J
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
4151.3179 1631.636 m
4075.9971 1628.7833 4020.2358 1380.4709 4023.1113 1304.5474 c
4026.626 1211.752 4049.062 1145.0172 4169.5757 1149.5815 c
4290.0889 1154.146 4307.4131 1222.3865 4303.8984 1315.182 c
4301.0229 1391.1056 4226.6392 1634.4888 4151.3179 1631.636 c
h
S
1 sc
CM
139.33258 114.6716 m
143.09863 114.52897 145.8867 102.11334 145.74294 98.317162 c
145.5672 93.677383 144.4454 90.340652 138.41972 90.568863 c
132.39404 90.797073 131.52785 94.209106 131.70357 98.848885 c
131.84734 102.64507 135.56653 114.81423 139.33258 114.6716 c
h
f
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
4126.6514 1886.568 m
4201.9727 1889.4207 4257.7339 2137.7332 4254.8584 2213.6567 c
4251.3442 2306.4524 4228.9082 2373.187 4108.3945 2368.6228 c
3987.8809 2364.0583 3970.5569 2295.8179 3974.0713 2203.0222 c
3976.9468 2127.0986 4051.3306 1883.7153 4126.6514 1886.568 c
h
S
1 J
4169.4102 1352.1204 m
4163.0708 1499.5005 l
S
CM
141.76382 149.13843 m
141.76382 149.13843 143.88759 138.18556 143.88759 138.18556 c
143.88759 138.18556 142.53113 139.95544 141.43266 140.3947 c
141.43266 140.3947 141.76382 149.13843 141.76382 149.13843 c
141.76382 149.13843 141.76382 149.13843 141.76382 149.13843 c
h
f
25.567398 13.324203 m
29.750937 17.704592 l
70.072723 21.224257 l
74.951927 17.634949 l
25.567398 13.324203 l
h
f
0 J
0.050000001 0 0 -0.050000001 -67 209 cm
1438.2867 3545.0698 m
1862.1954 3839.7983 l
S
CM
2.6914282 33.214787 m
4.2036147 33.347485 l
29.750937 17.704592 l
25.567398 13.324203 l
2.6914282 33.214787 l
h
f
1 J
0.050000001 0 0 -0.050000001 -67 209 cm
1408.2867 3515.0698 m
1823.4174 3081.865 l
S
1823.4174 3081.865 m
2722.4561 3003.3884 l
S
2722.4561 3003.3884 m
3206.3647 3358.1167 l
S
0 J
2821.2344 3761.3218 m
3176.3647 3388.1167 l
S
CM
74.951927 17.634949 m
70.072723 21.224257 l
92.523399 41.056862 l
93.318237 41.094162 l
93.570732 40.6143 l
74.951927 17.634949 l
h
f
0.050000001 0 0 -0.050000001 -67 209 cm
2942.0701 3381.1868 m
2957.5449 3558.469 2685.7214 3727.1914 2335.3613 3757.7739 c
1985.0015 3788.3569 1688.0564 3669.2817 1672.5815 3491.9998 c
1657.1067 3314.7173 1928.9301 3145.9956 2279.2898 3115.4126 c
2629.6499 3084.8301 2926.5952 3203.9043 2942.0701 3381.1868 c
h
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 119.59375 47.843063 cm
0 7.2802734 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
3206.3647 3358.1167 m
3702.4583 3314.813 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 129.84879 19.589233 cm
0 7.1582031 m
(")s
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
3972.3816 3738.5981 m
3845.5129 3449.8154 l
S
CM
134.43835 21.595598 m
128.7998 19.54459 l
124.80577 37.838314 l
125.74553 38.180149 l
134.43835 21.595598 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 146.78049 35.098099 cm
0 7.1582031 m
(")s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
4261.4009 3454.561 m
4211.793 3560.8911 l
S
4204.4507 3436.6963 m
4161.5137 3528.7283 l
S
4147.501 3418.8313 m
4111.2344 3496.5652 l
S
4090.5505 3400.9666 m
4060.9548 3464.4023 l
S
4033.6006 3383.1018 m
4010.6755 3432.2393 l
S
3976.6504 3365.2371 m
3960.3962 3400.0764 l
S
3919.7002 3347.3723 m
3910.1167 3367.9136 l
S
1 sc
CM
125.45276 48.417847 m
122.01564 49.963722 124.09193 62.518005 125.65017 65.98262 c
127.55469 70.217148 129.84697 72.888794 135.34636 70.41539 c
140.84575 67.941986 140.36781 64.454323 138.4633 60.219795 c
136.90506 56.75518 128.88988 46.871971 125.45276 48.417847 c
h
f
0 J
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
3849.0552 3211.6431 m
3780.3127 3180.7256 3821.8386 2929.6399 3853.0034 2860.3477 c
3891.0938 2775.657 3936.9395 2722.2241 4046.9272 2771.6921 c
4156.915 2821.1602 4147.3564 2890.9136 4109.2661 2975.604 c
4078.1011 3044.8965 3917.7976 3242.5605 3849.0552 3211.6431 c
h
S
1 J
4004.7988 2807.4595 m
3910.4565 2997.2205 l
S
3913.9041 3135.8318 m
4008.2461 2946.0708 l
S
CM
136.59122 68.764481 m
136.59122 68.764481 134.7719 58.616489 134.7719 58.616489 c
134.7719 58.616489 134.00072 60.334721 133.00212 60.784451 c
133.00212 60.784451 136.59122 68.764481 136.59122 68.764481 c
136.59122 68.764481 136.59122 68.764481 136.59122 68.764481 c
h
f
125.34392 51.070953 m
125.34392 51.070953 128.93301 59.050983 128.93301 59.050983 c
127.93442 59.500713 127.16323 61.218945 127.16323 61.218945 c
127.16323 61.218945 125.34392 51.070953 125.34392 51.070953 c
125.34392 51.070953 125.34392 51.070953 125.34392 51.070953 c
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 133.77129 79.477966 cm
0 7.1582031 m
(")s
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
5894.8999 2815 m
4957.5 2815 l
S
CM
240.875 68.25 m
240.875 68.25 225.875 64.497498 225.875 64.497498 c
225.875 64.497498 227.745 66.607658 227.745 68.25 c
227.745 70.330009 225.875 73.002502 225.875 73.002502 c
225.875 73.002502 240.875 68.25 240.875 68.25 c
240.875 68.25 240.875 68.25 240.875 68.25 c
h
f
333.35507 96.075104 m
337.74902 91.905823 l
288.21222 93.781998 l
292.90897 97.606979 l
333.35507 96.075104 l
h
f
0 J
0.050000001 0 0 -0.050000001 -67 209 cm
8487.9043 1952.1243 m
8082.0317 2270.2283 l
S
CM
358.10196 112.95581 m
358.89523 112.89378 l
359.08597 112.3862 l
337.74902 91.905823 l
333.35507 96.075104 l
358.10196 112.95581 l
h
f
1 J
0.050000001 0 0 -0.050000001 -67 209 cm
8517.9043 1922.1243 m
8081.9668 1509.8651 l
S
8081.9668 1509.8651 m
7180.1553 1475.7095 l
S
7180.1553 1475.7095 m
6714.2827 1853.8132 l
S
0 J
7120.2207 2236.0728 m
6744.2827 1883.8132 l
S
CM
292.90897 97.606979 m
288.21222 93.781998 l
267.99289 116.36794 l
269.50983 116.31119 l
292.90897 97.606979 l
h
f
0.050000001 0 0 -0.050000001 -67 209 cm
6979.3921 1863.854 m
6972.6567 2041.6827 7252.4517 2196.8291 7603.8921 2210.1396 c
7955.3315 2223.4502 8246.0605 2089.9121 8252.7949 1912.0835 c
8259.5303 1734.2548 7979.7358 1579.1086 7628.2959 1565.7981 c
7276.8555 1552.4875 6986.1274 1686.0254 6979.3921 1863.854 c
h
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 385.26291 115.8985 cm
0 7.2802734 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
8517.9043 1922.1243 m
9015.3369 1940.9644 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 412.88538 93.562851 cm
0 7.1582031 m
(")s
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
9549.5889 2287.3435 m
9237.0059 2046.3356 l
S
CM
413.86475 95.466415 m
410.09415 90.799232 l
393.03607 107.79429 l
393.66449 108.57215 l
413.86475 95.466415 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 419.02008 129.56969 cm
0 7.1582031 m
(")s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
9651.9424 1663.7819 m
9696.4717 1773.0795 l
S
9598.0459 1692.2218 m
9638.0449 1790.4016 l
S
9544.1484 1720.6619 m
9579.6182 1807.7239 l
S
9490.251 1749.1019 m
9521.1914 1825.046 l
S
9436.3535 1777.542 m
9462.7646 1842.3683 l
S
9382.4561 1805.9819 m
9404.3379 1859.6906 l
S
9328.5596 1834.422 m
9345.9111 1877.0127 l
S
9274.6621 1862.8621 m
9287.4844 1894.335 l
S
9220.7646 1891.3021 m
9229.0576 1911.6572 l
S
1 sc
CM
389.56592 118.4182 m
385.79987 118.56084 383.01178 130.97646 383.15558 134.77263 c
383.3313 139.4124 384.45309 142.74915 390.47876 142.52092 c
396.50446 142.29269 397.37064 138.88068 397.19492 134.24091 c
397.05115 130.44472 393.33194 118.27556 389.56592 118.4182 c
h
f
0 J
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
9131.3184 1811.636 m
9055.9971 1808.7833 9000.2354 1560.4709 9003.1113 1484.5474 c
9006.626 1391.752 9029.0615 1325.0172 9149.5752 1329.5815 c
9270.0889 1334.146 9287.4131 1402.3865 9283.8984 1495.182 c
9281.0225 1571.1056 9206.6387 1814.4888 9131.3184 1811.636 c
h
S
1 sc
CM
388.33258 105.6716 m
392.09863 105.52897 394.88672 93.113342 394.74292 89.317162 c
394.5672 84.677383 393.4454 81.340652 387.41974 81.568863 c
381.39404 81.797073 380.52783 85.209106 380.70355 89.848885 c
380.84735 93.645065 384.56653 105.81423 388.33258 105.6716 c
h
f
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
9106.6514 2066.5679 m
9181.9727 2069.4207 9237.7344 2317.7332 9234.8584 2393.6567 c
9231.3438 2486.4524 9208.9082 2553.187 9088.3945 2548.6228 c
8967.8809 2544.0583 8950.5566 2475.8179 8954.0713 2383.0222 c
8956.9473 2307.0986 9031.3301 2063.7153 9106.6514 2066.5679 c
h
S
CM
274.56738 4.3242035 m
278.75095 8.7045918 l
319.07272 12.224256 l
323.95193 8.6349487 l
274.56738 4.3242035 l
h
f
0.050000001 0 0 -0.050000001 -67 209 cm
6418.2866 3725.0698 m
6842.1953 4019.7983 l
S
CM
251.69142 24.214787 m
253.20361 24.347483 l
278.75095 8.7045918 l
274.56738 4.3242035 l
251.69142 24.214787 l
h
f
1 J
0.050000001 0 0 -0.050000001 -67 209 cm
6388.2866 3695.0698 m
6803.4175 3261.865 l
S
6803.4175 3261.865 m
7702.4561 3183.3884 l
S
7702.4561 3183.3884 m
8186.3647 3538.1167 l
S
0 J
7801.2344 3941.3218 m
8156.3647 3568.1167 l
S
CM
323.95193 8.6349487 m
319.07272 12.224256 l
341.52341 32.056862 l
342.31824 32.094162 l
342.57074 31.614302 l
323.95193 8.6349487 l
h
f
0.050000001 0 0 -0.050000001 -67 209 cm
7922.0698 3561.1868 m
7937.5449 3738.469 7665.7217 3907.1914 7315.3613 3937.7739 c
6965.0015 3968.3569 6668.0562 3849.2817 6652.5815 3671.9998 c
6637.1064 3494.7173 6908.9302 3325.9956 7259.29 3295.4126 c
7609.6499 3264.8301 7906.5952 3383.9043 7922.0698 3561.1868 c
h
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 368.59375 38.843063 cm
0 7.2802734 m
(!)s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
8186.3647 3538.1167 m
8682.458 3494.813 l
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 378.84879 10.589233 cm
0 7.1582031 m
(")s
0 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
8952.3818 3918.5981 m
8825.5127 3629.8154 l
S
CM
383.43835 12.595597 m
377.7998 10.54459 l
373.80579 28.838314 l
374.74554 29.180149 l
383.43835 12.595597 l
h
f
/Cs2 SC
0 0 0 sc
1 0 0 -1 395.78049 26.098099 cm
0 7.1582031 m
(")s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
9241.4014 3634.561 m
9191.793 3740.8911 l
S
9184.4512 3616.6963 m
9141.5137 3708.7283 l
S
9127.501 3598.8313 m
9091.2344 3676.5652 l
S
9070.5508 3580.9666 m
9040.9551 3644.4023 l
S
9013.6006 3563.1018 m
8990.6758 3612.2393 l
S
8956.6504 3545.2371 m
8940.3965 3580.0764 l
S
8899.7002 3527.3723 m
8890.1172 3547.9136 l
S
1 sc
CM
374.45276 39.417847 m
371.01566 40.963722 373.09192 53.518005 374.65018 56.98262 c
376.55469 61.217148 378.84698 63.88879 384.34637 61.41539 c
389.84573 58.94199 389.36783 55.454323 387.46329 51.219795 c
385.90506 47.75518 377.88986 37.871971 374.45276 39.417847 c
h
f
0 J
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
8829.0547 3391.6431 m
8760.3125 3360.7256 8801.8389 3109.6399 8833.0039 3040.3477 c
8871.0938 2955.657 8916.9395 2902.2241 9026.9268 2951.6921 c
9136.915 3001.1602 9127.3564 3070.9136 9089.2656 3155.604 c
9058.1016 3224.8965 8897.7979 3422.5605 8829.0547 3391.6431 c
h
S
/Cs2 SC
0 0 0 sc
1 0 0 -1 383.5213 77.977966 cm
0 7.1582031 m
(")s
1 J
/Cs1 SC
0 sc
0.050000001 0 0 -0.050000001 -67 209 cm
9062.3633 2128.6626 m
9058.4658 2338.6299 l
S
9116.3398 2464.6284 m
9120.2363 2254.6611 l
S
CM
389.14313 104.01583 m
389.14313 104.01583 391.47583 93.017265 391.47583 93.017265 c
391.47583 93.017265 390.08957 94.829582 388.99487 95.267082 c
388.99487 95.267082 389.14313 104.01583 389.14313 104.01583 c
389.14313 104.01583 389.14313 104.01583 389.14313 104.01583 c
h
f
385.79199 83.319618 m
385.79199 83.319618 385.94025 92.068367 385.94025 92.068367 c
384.84555 92.505867 383.45929 94.318184 383.45929 94.318184 c
383.45929 94.318184 385.79199 83.319618 385.79199 83.319618 c
385.79199 83.319618 385.79199 83.319618 385.79199 83.319618 c
h
f
0.050000001 0 0 -0.050000001 -67 209 cm
8923.3535 3133.4597 m
8850.0596 3252.5732 l
S
CM
384.48428 58.763596 m
384.48428 58.763596 381.02673 49.113216 381.02673 49.113216 c
381.02673 49.113216 380.5257 50.882515 379.61072 51.49649 c
379.61072 51.49649 384.48428 58.763596 384.48428 58.763596 c
384.48428 58.763596 384.48428 58.763596 384.48428 58.763596 c
h
f
ep
end
%%Trailer
%%EOF
